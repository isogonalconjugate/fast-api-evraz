import gradio as gr
import requests
import os
from io import BytesIO

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç FastAPI
API_URL = "http://localhost:8000/api/v1/upload"


def upload_and_analyze(file):
    if file is None:
        return "‚ùå –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.", None

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ FastAPI
        with open(file.name, "rb") as f:  # `file` - —ç—Ç–æ –æ–±—ä–µ–∫—Ç File –∏–∑ Gradio
            files = {'file': (os.path.basename(file.name), f, 'application/zip')}
            response = requests.post(API_URL, files=files)

        if response.status_code != 200:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {response.text}", None

        # –ü–æ–ª—É—á–∞–µ–º PDF-–æ—Ç—á–µ—Ç
        pdf_content = response.content

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç BytesIO
        pdf_file = BytesIO(pdf_content)
        pdf_file.name = f"report_{os.path.splitext(os.path.basename(file.name))[0]}.pdf"
        pdf_file.seek(0)

        return "‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç –Ω–∏–∂–µ.", pdf_file

    except Exception as e:
        return f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", None


# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Gradio
with gr.Blocks() as demo:
    gr.Markdown("# üóÇÔ∏è –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –§–∞–π–ª–æ–≤ –∏ –°—Ç—Ä—É–∫—Ç—É—Ä—ã –ü—Ä–æ–µ–∫—Ç–∞")
    gr.Markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ ZIP-–∞—Ä—Ö–∏–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")

    with gr.Row():
        file_input = gr.File(label="–ó–∞–≥—Ä—É–∑–∏—Ç–µ ZIP-–∞—Ä—Ö–∏–≤", file_types=[".zip"], type="filepath")

    analyze_button = gr.Button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å")

    status_output = gr.Textbox(label="–°—Ç–∞—Ç—É—Å", interactive=False)
    pdf_output = gr.File(label="–°–∫–∞—á–∞—Ç—å PDF –æ—Ç—á–µ—Ç", interactive=False)

    analyze_button.click(
        upload_and_analyze,
        inputs=file_input,
        outputs=[status_output, pdf_output]
    )

if __name__ == "__main__":
    demo.launch()